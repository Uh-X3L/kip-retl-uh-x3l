"""
Integration tests for real agent work
Generated by Testing Agent: 2025-08-18T22:04:11.510430
"""

import unittest
import tempfile
import shutil
from pathlib import Path
import sys

sys.path.insert(0, str(Path(__file__).parent.parent))

from complete_task_execution_system import CompleteTaskExecutionSystem


class TestAgentRealWork(unittest.TestCase):
    """Integration tests for real agent file modifications."""
    
    def setUp(self):
        """Set up temporary workspace for testing."""
        self.temp_dir = Path(tempfile.mkdtemp())
        self.system = CompleteTaskExecutionSystem()
    
    def tearDown(self):
        """Clean up temporary workspace."""
        if self.temp_dir.exists():
            shutil.rmtree(self.temp_dir)
    
    def test_documentation_creates_real_files(self):
        """Test that documentation agent creates actual files."""
        result = self.system._agent_create_real_documentation(
            self.temp_dir, "Test documentation", "Create docs"
        )
        
        self.assertTrue(result['success'])
        self.assertGreater(len(result['files_modified']), 0)
        
        # Verify files actually exist
        for file_path in result['files_modified']:
            self.assertTrue(Path(file_path).exists())
    
    def test_devops_creates_real_infrastructure(self):
        """Test that DevOps agent creates actual infrastructure files."""
        result = self.system._agent_create_real_devops_files(
            self.temp_dir, "Test DevOps", "Create infrastructure"
        )
        
        self.assertTrue(result['success'])
        self.assertGreater(len(result['files_modified']), 0)
        
        # Verify specific files exist
        dockerfile = self.temp_dir / "Dockerfile"
        compose_file = self.temp_dir / "docker-compose.yml"
        
        self.assertTrue(dockerfile.exists())
        self.assertTrue(compose_file.exists())
    
    def test_worker_creates_real_reports(self):
        """Test that worker agent creates actual refactoring reports."""
        result = self.system._agent_perform_real_refactoring(
            self.temp_dir, "Test refactoring", "Refactor codebase"
        )
        
        self.assertTrue(result['success'])
        self.assertGreater(len(result['files_modified']), 0)
        
        # Verify files have content
        for file_path in result['files_modified']:
            file_obj = Path(file_path)
            self.assertTrue(file_obj.exists())
            self.assertGreater(file_obj.stat().st_size, 0)


if __name__ == '__main__':
    unittest.main()
