"""
Test suite for CompleteTaskExecutionSystem
Generated by Testing Agent: 2025-08-18T21:47:23.450502
Task: 
"""

import unittest
import sys
from pathlib import Path
from unittest.mock import Mock, patch

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from complete_task_execution_system import CompleteTaskExecutionSystem


class TestCompleteTaskExecutionSystem(unittest.TestCase):
    """Real tests for the Complete Task Execution System."""
    
    def setUp(self):
        """Set up test environment."""
        self.system = CompleteTaskExecutionSystem()
    
    def test_system_initialization(self):
        """Test that the system initializes correctly."""
        self.assertIsNotNone(self.system)
        self.assertIsNotNone(self.system.system_id)
        self.assertIsInstance(self.system.agents, dict)
    
    def test_system_health_check(self):
        """Test system health monitoring."""
        health = self.system.get_system_health()
        self.assertIsInstance(health, dict)
        self.assertIn('healthy', health)
        self.assertIn('errors', health)
        self.assertIn('warnings', health)
    
    def test_agent_discovery(self):
        """Test that agents can be discovered and loaded."""
        # Test finding agent for type
        agent = self.system._find_agent_for_type('documentation')
        # May be None if Azure AI not configured, that's OK for test
        self.assertTrue(agent is None or hasattr(agent, 'send_message'))
    
    @patch('complete_task_execution_system.CompleteTaskExecutionSystem._execute_real_task_with_agent')
    def test_real_task_execution(self, mock_execute):
        """Test real task execution workflow."""
        mock_execute.return_value = {
            'success': True,
            'deliverables': ['test_deliverable'],
            'summary': 'Test completed successfully',
            'files_modified': ['test_file.py'],
            'real_changes_made': ['Created test file']
        }
        
        # Test task execution
        task = "Test task execution"
        requirements = "Test requirements"
        
        # Mock the planning phase
        planning_result = {
            'success': True,
            'task_description': task,
            'requirements': requirements,
            'subtasks_count': 1,
            'agent_types_required': ['testing']
        }
        
        communication_result = {'success': True}
        
        result = self.system._phase_3_execution(planning_result, communication_result)
        
        self.assertIsInstance(result, dict)
        self.assertIn('success', result)
        self.assertIn('execution_details', result)
    
    def test_agent_type_mapping(self):
        """Test that agent types are correctly mapped to subtasks."""
        subtasks = self.system._create_specific_subtasks(
            "Test project",
            "Test requirements", 
            ['documentation', 'testing', 'worker']
        )
        
        self.assertIsInstance(subtasks, list)
        self.assertEqual(len(subtasks), 3)
        
        agent_types = [task['agent_type'] for task in subtasks]
        self.assertIn('documentation', agent_types)
        self.assertIn('testing', agent_types)
        self.assertIn('worker', agent_types)


class TestRealAgentWork(unittest.TestCase):
    """Test the real agent work methods."""
    
    def setUp(self):
        self.system = CompleteTaskExecutionSystem()
        self.workspace_path = Path.cwd()
        self.test_task = "Test task"
        self.test_requirements = "Test requirements"
    
    def test_documentation_agent_real_work(self):
        """Test that documentation agent creates real files."""
        result = self.system._agent_create_real_documentation(
            self.workspace_path, self.test_task, self.test_requirements
        )
        
        self.assertIsInstance(result, dict)
        self.assertIn('success', result)
        self.assertIn('files_modified', result)
        self.assertIn('real_changes_made', result)
        
        if result['success']:
            self.assertGreater(len(result['files_modified']), 0)
            self.assertGreater(len(result['real_changes_made']), 0)
    
    def test_worker_agent_real_work(self):
        """Test that worker agent performs real refactoring."""
        result = self.system._agent_perform_real_refactoring(
            self.workspace_path, self.test_task, self.test_requirements
        )
        
        self.assertIsInstance(result, dict)
        self.assertIn('success', result)
        self.assertIn('files_modified', result)
        
        if result['success']:
            self.assertGreater(len(result['files_modified']), 0)
    
    def test_devops_agent_real_work(self):
        """Test that DevOps agent creates real infrastructure files."""
        result = self.system._agent_create_real_devops_files(
            self.workspace_path, self.test_task, self.test_requirements
        )
        
        self.assertIsInstance(result, dict)
        self.assertIn('success', result)
        self.assertIn('files_modified', result)
        
        if result['success']:
            self.assertGreater(len(result['files_modified']), 0)


if __name__ == '__main__':
    unittest.main()
